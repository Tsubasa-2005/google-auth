/* tslint:disable */
/* eslint-disable */
/**
 * Google Login API
 * API to handle user registration and login using Google authentication
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the user (Primary Key)
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * Unique email address of the user
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * Name of the user
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * URL to the user's profile image
     * @type {string}
     * @memberof User
     */
    imageUrl: string;
    /**
     * Timestamp when the user was created
     * @type {Date}
     * @memberof User
     */
    createdAt?: Date;
    /**
     * Timestamp when the user was last updated
     * @type {Date}
     * @memberof User
     */
    updatedAt?: Date;
    /**
     * Timestamp when the user was deleted, if applicable (null if not deleted)
     * @type {Date}
     * @memberof User
     */
    deletedAt?: Date | null;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('imageUrl' in value) || value['imageUrl'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'email': json['email'],
        'name': json['name'],
        'imageUrl': json['image_url'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'deletedAt': json['deleted_at'] == null ? undefined : (new Date(json['deleted_at'])),
    };
}

  export function UserToJSON(json: any): User {
      return UserToJSONTyped(json, false);
  }

  export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'email': value['email'],
        'name': value['name'],
        'image_url': value['imageUrl'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'deleted_at': value['deletedAt'] == null ? undefined : ((value['deletedAt'] as any).toISOString()),
    };
}

